# Global Server and Build Settings
server: 
  port: 8080
info:  
  build:
    version:  "@project.version@"
    artifact: "@project.artifactId@"
    name: "@project.name@"
    description: "@project.description@"
---
spring.profiles: default
spring.profiles.include: remote_client_sims, embedded-redis
---
spring.profiles: local-int, ci, dev, stage, prod
spring.profiles.include: remote_client_sims
---
spring: 
  cache:
    type: redis
  redis: 
    host: localhost
    port: 6379
  sleuth:
    stream:
      enabled: false 
  cloud:
    bus:
      enabled: false
  security:
    basic:
      enabled: false
    user:
      name: ${os.reference.security.username:admin}
      password: ${os.reference.security.password:default}
  # spring jackson mapper, serialization and deserialization global settings
  jackson:
    mapper:
      DEFAULT_VIEW_INCLUSION: true 
    serialization: 
      indent_output: true
      WRITE_DATES_AS_TIMESTAMPS: false
    deserialization:
      FAIL_ON_IGNORED_PROPERTIES: false
      FAIL_ON_UNKNOWN_PROPERTIES: false
      ACCEPT_SINGLE_VALUE_AS_ARRAY: true
    default-property-inclusion: non_empty

# Route Path
# service.context: http://localhost:8080

# expose all endpoints:
management.endpoints.web.exposure.include: "*"
# disable beans endpoint  
management.endpoint.beans.enabled: false

# REDIS (RedisProperties)
reference:
  cache:
    defaultExpires: 86400 # (Seconds)
    expires:
      #Cache Name: TTL (In Seconds)
      demoPersonService: 1800
      demoService: 600
    redis-config:
      host: localhost
      port: 6379
#Application Custom Properties          
service-1:
  env: default
  propSource: internal
  password: secret
  sampleProperty: >
                  sampleProperty___env/profile:${service-1.env}___propSource:
                  ${service-1.propSource}__password:${service-1.password}
#*********************************************************************
# BGS-Specific SERVICE CLIENT PROPERTIES
#*********************************************************************
#----------------------------------------
# BGS-Specific default properties
#----------------------------------------
bgs:
  url: http://localhost:58540/mockPersonWebServicePortBinding
  username: unitTestUsername
  password: unitTestPassword
  systemId: eBenefits
  vaApplicationName: eBenefits
  vaUCApplicationName: EBENEFITS
  stationId: 281
#---------------------------------------------------
#   PersonService SOAP web service client configuration
#---------------------------------------------------
wss-partner-person: 
  ws:
    client: 
      username: ${bgs.username}
      password: ${bgs.password}
      systemId: {bgs.systemId}
      vaApplicationName: ${bgs.vaApplicationName}
      stationId: ${bgs.stationId}
      endpoint: ${bgs.url}
      methodWarningThreshhold: 2500
      readTimeout: 360000
      connectionTimeout: 120000
#---------------------------------------------------
#   Logging Level for packages
#---------------------------------------------------
logging: 
  level:
    com.ecwid.consul: INFO
    gov.va.os.reference: DEBUG
    org.springframework.security.web: INFO
    org.springframework.cloud.consul.config: TRACE
    org.springframework.cloud.consul: INFO
    org.springframework.client.discovery: INFO
    org.springframework.cloud.sleuth: INFO 
    org.springframework.cloud.sleuth.log: DEBUG
    org.springframework.security: INFO
    org.springframework.ws: INFO
    org.springframework.cache: INFO 
    org.apache.http.impl.client: INFO
management:
  health:
    rabbit:
      enabled: false
    redis:
      enabled: false
#sanitize properties for keys when using /configprops.
endpoints:
  configprops:
    keys-to-sanitize: 'enabled, password'
hystrix:
  # set the hystrix.shareSecurityContext property to true. Doing so will auto configure an Hystrix concurrency strategy 
  # plugin hook who will transfer the SecurityContext from your main thread to the one used by the Hystrix command
  shareSecurityContext: true
  command:
    default:
      metrics:
        rollingStats:
          # This property sets the duration of the statistical rolling window, in milliseconds. 
          # This is how long Hystrix keeps metrics for the circuit breaker to use and for publishing 
          # Default Value: 10000
          timeInMilliseconds: 20000
        # This property sets the time to wait, in milliseconds, between allowing health snapshots to be taken that calculate 
        # success and error percentages and affect circuit breaker status. 
        # Default Value: 500
        healthSnapshot: 
          intervalInMilliseconds: 1000
      circuitBreaker:
        # This property sets the amount of time, after tripping the circuit, to reject requests 
        # before allowing attempts again to determine if the circuit should again be closed.
        # Default Value: 5000
        sleepWindowInMilliseconds: 10000
        # This property sets the minimum number of requests in a rolling window that will trip the circuit.
        # Default Value: 20
        requestVolumeThreshold: 4
      execution:
        isolation:
          thread:
            # This property sets the time in milliseconds after which the caller will observe a timeout and 
            # walk away from the command execution. Hystrix marks the HystrixCommand as a TIMEOUT, and performs fallback 
            # logic. Note that there is configuration for turning off timeouts per-command, if that is desired (see command.timeout.enabled).
            # Default Value: 1000
            timeoutInMilliseconds: 20000

# Sleuth configuration     
# To skip specific patterns being exported, added few more customs on top of default skip pattern
# see org.springframework.cloud.sleuth.instrument.web.TraceFilter.DEFAULT_SKIP_PATTERN
spring.sleuth.web.skipPattern: (/api/.*/webjars.*|/api/.*/v2/api-docs.*|/api/.*/swagger-resources.*|/api/.*/swagger-ui.*|/api-docs.*|/autoconfig|/configprops|/dump|/health|/info|/metrics.*|/mappings|/trace|/swagger.*|.*\\.png|.*\\.css|.*\\.js|.*\\.html|/favicon.ico|/hystrix.stream)
# comma separated list of matchers
spring.sleuth.rxjava.schedulers.ignoredthreads: HystixMetricPoller,^RxComputation.*$,^RxIoScheduler.*$

#Property configuration to enable or disable JWT security for the service calls 
#JWT security is enabled by default. So to disable it you have to
#set the environment system property os.reference.security.jwt.enabled=false
os.reference:
  security:
    jwt:
      enabled: true
      filterProcessUrls: 
        - /service-1/v1/**
        - /service-1/v2/**
      excludeUrls:
        - /**
  swagger:
    title: OpenShift Reference Spring Boot Service v1 API Documentation
    description: API Error Keys <a href="swagger/error-keys.html">error keys</a>
    groupName: "@project.name@-@project.version@"
    version: ${info.build.version}
    securePaths: /service-1/.*/v?.*
# ---
#spring:
#  profiles: local-int,ci,dev,stage,prod
#server:
#  ssl:
#    enabled: true
#    ######### These properties are set by the run-wrapper.sh script in the ascent-base container #########
#    # key-alias: @project.name@
#    # key-store: /app/certs/server.jks
#    # key-store-password: 
#    # trust-store: /app/certs/server-truststore.jks
#    # trust-store-password:
#    ######################################################################################################
#    client-auth: need