# Global Server and Build Settings
# Learn: https://docs.spring.io/spring-boot/docs/current/reference/html/howto-properties-and-configuration.html#howto-use-yaml-for-external-properties
info:  
  build:
    version:  "@project.version@"
    artifact: "@project.artifactId@"
    name: "@project.name@"
    description: "@project.description@"
server: 
  port: ${reference.server.port:8080}

# Route Path
# service.context: http://localhost:8080
      
# expose all endpoints:
management.endpoints.web.exposure.include: "*"
# disable beans endpoint  
management.endpoint.beans.enabled: false
---
reference:
########################################
# JSR303 properties to be added for
# resolving message keys
########################################
  validation:
    messages:
      user-resource-bundle: 
##################################################
# Feign or REST client connection timeout
# when making inter-service or external REST calls
##################################################
  rest:
    client:
      connection-timeout: 30000
########################################
# REDIS Custom Cache Properties
# Default Expiration and For Each Bucket
########################################
  cache:
    defaultExpires: 86400 # (24hr - in seconds)
    expires:
      # name: Cache Name
      # ttl:  TTL (in Seconds)
      - 
        name: findPersonByParticipantID_@project.name@_@project.version@
        ttl: 604800 # 1 week
      - 
        name: getPersonInfo_@project.name@_@project.version@
        ttl: 604800 # 1 week
      - 
        name: read_@project.name@_@project.version@
        ttl: 604800 # 1 week
  ############################################################################
  #Property configuration to enable or disable JWT security for service calls
  ############################################################################
#  security:
#    jwt:
#      enabled: false
#      filter-process-url: /demo/v?/**
#      excludeUrls: 
#        - /**
#        - /v2/api-docs/**
#        - /configuration/ui/**
#        - /swagger-resources/**
#        - /configuration/security/**
#        - /swagger-ui.html
#        - /webjars/**
#        - /**/token
#        - /**/swagger/error-keys.html
#  swagger:
#    title: OpenShift Reference Spring Boot Service v1 API Documentation
#    description: API Error Keys <a href="swagger/error-keys.html">error keys</a>
#    groupName: demo-v1
#    version: ${info.build.version}
#    securePaths: /demo.*
#Property configuration to enable or disable JWT security for service calls 
#JWT security is enabled by default in exteral repo. So to disable it you have to
#set the environment system property reference.security.jwt.enabled=false
  security:
    jwt:
      enabled: true
      filter-process-url: /v?/**
      validation:
        required-parameters: pid
  swagger:
    title: OpenShift Reference @project.version@ API Documentation
    description: API Error Keys <a href="swagger/error-keys.html">error keys</a>
    groupName: os.reference-@project.version@
    version: ${info.build.version}
    securePaths: /api/.*/v?.*|/v[0-9]/?.*

####################################### 
#   Logging Level for packages
#######################################
logging:
  level:
    gov:
      va:
        reference: INFO
    org:
      springframework:
        cloud.sleuth: INFO
        cloud.sleuth.instrument.web: INFO
        security: INFO
        ws: INFO
        cache: INFO
      apache:
        http:
          impl.client: INFO
          # org.apache.http.wire value logs rest and soap requests/responses
          # as they are on the wire. Change to DEBUG in springboot manager
          # to see request/response in the logs
          wire: ERROR
####################################### 
#   Base security
#######################################
security:
  user:
    name: ${reference.security.username:admin}
    password: ${reference.security.password:default}
####################################### 
#   Base cloud
#######################################
management:
  # is security.enabled=false needed ???
  security:
    enabled: false
  health:
    rabbit:
      enabled: false
    redis:
      enabled: false
#######################################
#sanitize properties for keys when using /configprops.
#######################################
endpoints:
  configprops:
    keys-to-sanitize: 'enabled, password'
#######################################
#  hystrix command overrides
#######################################
hystrix:
  shareSecurityContext: true
  command:
    #DemoServiceAsyncReadCommand: 
    #  execution:
    #    isolation:
    #      thread:
            # This property sets the time in milliseconds after which the caller will observe a timeout and 
            # walk away from the command execution. Hystrix marks the HystrixCommand as a TIMEOUT, and performs fallback 
            # logic. Note that there is configuration for turning off timeouts per-command, if that is desired (see command.timeout.enabled).
            # Default Value: 1000
    #        timeoutInMilliseconds: 6000
    default:
      metrics:
        rollingStats:
          # This property sets the duration of the statistical rolling window, in milliseconds.
          # This is how long Hystrix keeps metrics for the circuit breaker to use and for publishing
          # Default Value: 10000
          timeInMilliseconds: 20000
        # This property sets the time to wait, in milliseconds, between allowing health snapshots to be taken that calculate
        # success and error percentages and affect circuit breaker status.
        # Default Value: 500
        healthSnapshot:
          intervalInMilliseconds: 1000
      circuitBreaker:
        # This property sets the amount of time, after tripping the circuit, to reject requests
        # before allowing attempts again to determine if the circuit should again be closed.
        # Default Value: 5000
        sleepWindowInMilliseconds: 10000
        # This property sets the minimum number of requests in a rolling window that will trip the circuit.
        # Default Value: 20
        requestVolumeThreshold: 4
      execution:
        isolation:
          thread:
            # This property sets the time in milliseconds after which the caller will observe a timeout and walk away from the
            # command execution. Hystrix marks the HystrixCommand as a TIMEOUT, and performs fallback logic. Note that there
            # is configuration for turning off timeouts per-command, if that is desired (see command.timeout.enabled).
            # IMPORTANT NOTE: THIS TIMEOUT VALUE MUST BE GREATER THAN ANY SERVICE TIMEOUT TO AVOID ERRORS
            # Default Value: 1000
            timeoutInMilliseconds: 20000
  threadpool:
    default:
      # This property allows the configuration for maximumSize to take effect
      allowMaximumSizeToDivergeFromCoreSize: true
      # maximum number of threads in the pool. Default value for coreSize and maximumSize = 10 
      maximumSize: 100
      # maximum number of Runnable task the ExecutorService can take in.
      maxQueueSize: 200
      # This property exists because the maxQueueSize of a BlockingQueue cannot be dynamically changed and we want to allow you to 
      # dynamically change the queue size that affects rejections
      queueSizeRejectionThreshold: 200

#######################################
# Sleuth configuration
# To skip specific patterns being exported, added few more customs on top of default skip pattern
# see org.springframework.cloud.sleuth.instrument.web.TraceFilter.DEFAULT_SKIP_PATTERN
#######################################
spring.sleuth.web.skipPattern: (/api/.*/webjars.*|/api/.*/v2/api-docs.*|/api/.*/swagger-resources.*|/api/.*/swagger-ui.*|/api-docs.*|/autoconfig|/configprops|/dump|/health|/info|/metrics.*|/mappings|/trace|/swagger.*|.*\\.png|.*\\.css|.*\\.js|.*\\.html|/favicon.ico|/hystrix.stream)
# comma separated list of matchers
spring.sleuth.rxjava.schedulers.ignoredthreads: HystixMetricPoller,^RxComputation.*$,^RxIoScheduler.*$
---
spring.profiles: default, local-int
spring.profiles.include: remote_client_sims, embedded-redis
reference:
  cache:
    redis-config: 
      host: localhost
      port: 6379
  security:
    jwt:
      secret: vetsgov
spring: 
  cache:
    type: redis
  cloud:
    bus:
      enabled: false
  redis: 
    host: localhost
    port: 6379
  sleuth:
    stream:
      enabled: false
---
spring: 
  cloud:
    bus:
      enabled: false
#Application Custom Properties          
reference-demo-service:
  env: default
  propSource: internal
  password: secret
  sampleProperty: >
                  sampleProperty___env/profile:${reference-demo-service.env}___propSource:
                  ${reference-demo-service.propSource}__password:${reference-demo-service.password}
#*********************************************************************
# BGS-Specific SERVICE CLIENT PROPERTIES
#*********************************************************************
---
# demo should never hit partner, should it?
# For other projects, the two lines below would not be here
spring.profiles: docker-demo, aws-ci, aws-dev, aws-stage, aws-prod
spring.profiles.include: remote_client_sims
---
# config for non-docker environments
spring.profiles: default,local-int
spring.profiles.include: remote_client_sims,embedded-redis
reference:
  cache:
    redis-config:
      host: localhost
      port: 6379
  security:
    jwt:
      secret: vetsgov
spring:
  cache:
    type: redis
  cloud:
    bus:
      enabled: false
  redis:
    host: localhost
    port: 6379
  sleuth:
    stream:
      enabled: false
---
#######################################
# Partner config properties
#######################################

### partner SIMULATED vs IMPL environments ###
# The bgs URL is controlled from ext-config (points to consul)
spring.profiles: default,local-int,docker-demo,aws-ci
spring.profiles.include: remote_client_sims
bgs:
  url: http://localhost:58540/mockWebServicePortBinding
  username: unitTestUsername
  password: unitTestPassword
---
### BGS partner data ###
# !!!!!!!!!!---  NOTE  ---!!!!!!!!!!!!!
# most 'bgs.**' properties need to be set differently
# depending on the spring profile.
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
### partner common properties
bgs:
  systemId: eBenefits
  vaApplicationName: eBenefits
  vaUCApplicationName: EBENEFITS
  stationId: 281
  #url: ... url is set in ext config
  default:
    methodWarningThreshhold: 2500
    readTimeout: 60000
    connectionTimeout: 60000
---
# the following is the typical properties for a partner
os-reference-partner: 
  server:
    ssl:
      key-alias: bgs # separate declaration because it is not always the same between partners
  ws:
    client:
      endpoint: ${bgs.url}/IntentToFileWebServiceBean/IntentToFileWebService?WSDL
      username: ${bgs.username}
      password: ${bgs.password}
      vaApplicationName: ${bgs.vaApplicationName}
      logValidation: true
      readTimeout: ${bgs.default.readTimeout}
      connectionTimeout: ${bgs.default.connectionTimeout}
      methodWarningThreshhold: ${bgs.default.methodWarningThreshhold}
      stationID: ${bgs.stationId}
      ssl:
        keystore: ${javax.net.ssl.keyStore:src/test/resources/ssl/dev/vaebnweb1Keystore.jks}
        keystorePass: ${javax.net.ssl.keyStorePassword:password}
        truststore: ${javax.net.ssl.trustStore:src/test/resources/ssl/dev/vaebnTruststore.jks}
        truststorePass: ${javax.net.ssl.trustStorePassword:password}

# ---
#spring:
#  profiles: docker-demo,aws-ci,aws-dev,aws-stage,aws-prod
#server:
#  ssl:
#    enabled: true
#    ######### These properties are set by the run-wrapper.sh script in the reference-base container #########
#    # key-alias: @project.name@
#    # key-store: /app/certs/server.jks
#    # key-store-password: 
#    # trust-store: /app/certs/server-truststore.jks
#    # trust-store-password:
#    ######################################################################################################
#    client-auth: need