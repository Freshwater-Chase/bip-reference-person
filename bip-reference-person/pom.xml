<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
    
    <parent>
		<groupId>gov.va.bip.reference.person</groupId>
		<artifactId>bip-reference-reactor</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<relativePath>..</relativePath>
	</parent>
	
    <artifactId>bip-reference-person</artifactId>
    <packaging>jar</packaging>
    
    <name>${project.artifactId}</name>
    <description>Reference Person Service Implementation for BIP Spring Boot Project</description>
    
    <properties>
	    <yaml.file>${basedir}/src/main/resources/swagger/api.yml</yaml.file>
	    <generated-sources-path>${project.build.directory}/generated-sources</generated-sources-path>
	    <generated-sources-java-path>main/java</generated-sources-java-path>
	    <version.swagger.codegen>3.0.8</version.swagger.codegen>
	    <!-- TODO add the properties from target/generated-sources/pom.xml here -->
	</properties>
    
    <dependencies>
    	<dependency>
            <groupId>gov.va.bip.framework</groupId>
            <artifactId>bip-framework-libraries</artifactId>
            <version>1.0.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>gov.va.bip.framework</groupId>
            <artifactId>bip-framework-autoconfigure</artifactId>
            <version>1.0.1-SNAPSHOT</version>
        </dependency>
		<dependency>
            <groupId>gov.va.bip.reference.person</groupId>
            <artifactId>bip-reference-partner-person</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>
    	<!-- spring-boot dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </dependency>
        <dependency>
        	<groupId>org.springframework.boot</groupId>
        	<artifactId>spring-boot-configuration-processor</artifactId>
        	<optional>true</optional>
        </dependency>
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <!-- spring cloud dependencies -->
        <!-- Spring-cloud Netflix Feign dependency for defining declarative REST clients -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
        <!-- Spring-cloud Netflix hystrix dependency for circuit breaker implementation -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bus-amqp</artifactId>
        </dependency>
	   <dependency> 
	       <groupId>org.springframework.cloud</groupId>
	       <artifactId>spring-cloud-starter-sleuth</artifactId>
	   </dependency>		   
	   <dependency> 
	       <groupId>org.springframework.cloud</groupId>
	       <artifactId>spring-cloud-stream-binder-rabbit</artifactId>
	   </dependency>
	   <dependency>
		   <groupId>org.springframework.retry</groupId>
		   <artifactId>spring-retry</artifactId>
	   </dependency>
		<dependency> 
	       <groupId>org.springframework.cloud</groupId>
	       <artifactId>spring-cloud-vault-config-consul</artifactId>
	   </dependency>
   		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-consul-config</artifactId>
		</dependency>
		<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-consul-all</artifactId>
            <exclusions>
            	<!-- Module spring-cloud-netflix-core is deprecated as of 2.1.0, use spring-cloud-netflix-hystrix instead. -->
				<exclusion>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-netflix-core</artifactId>
				</exclusion>
			</exclusions>
        </dependency>
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.codehaus.janino/janino -->
		<dependency>
		    <groupId>org.codehaus.janino</groupId>
		    <artifactId>janino</artifactId>
		</dependency>
        <!-- test dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
    	<plugins>
    		 <plugin>
				<!-- 
				 * Meta-information about the web application.<br/><br/>
				 * 
				 * The templating maven plugin handles generating and copying files from a source to a given output directory, while filtering them. 
				 * This plugin is useful to filter Java Source Code as there is a need to have things in the code replaced with properties values.
				 * Generates class to store project.* properties in the ApplicationInfo.java placed under <sourceDirectory>
				 * This mojo helps adding a filtered source folder in one go. This is useful as we want to use properties coming from the POM inside 
				 * parts of our source code that requires real constants
				 *
				 * @see ApplicationInfo.java in src/java-template directory
			    -->
			    <groupId>org.codehaus.mojo</groupId>
			    <artifactId>templating-maven-plugin</artifactId>
			    <version>${templating-maven-plugin.version}</version>
			    <executions>
			        <execution>
			            <id>filtering-java-templates</id>
			            <goals>
			                <goal>filter-sources</goal>
			            </goals>
			            <configuration>
			             <sourceDirectory>${basedir}/src/main/java-template</sourceDirectory>
			          		<outputDirectory>${project.build.directory}/generated-sources/java-template</outputDirectory>
			          	</configuration>
			        </execution>
			    </executions>
			</plugin>
			<plugin>
				<!-- Generate the source java file described by the templating-maven-plugin above -->
			      <groupId>org.codehaus.mojo</groupId>
			      <artifactId>build-helper-maven-plugin</artifactId>
			      <executions>
			          <execution>
			              <id>add-source</id>
			              <phase>generate-sources</phase>
			              <goals>
			                  <goal>add-source</goal>
			              </goals>
			              <configuration>
			                  <sources>
			                      <source>${project.build.directory}/generated-sources/java-template</source>
			                  </sources>
			              </configuration>
			          </execution>
			      </executions>
			  </plugin>
    	</plugins>
    </build>
    
    <profiles>
		<profile>
			<id>io.swagger.codegen.v3-project</id>
			<activation>
				<file><!-- add a file named .docker-jar-project-marker to war projects 
						to activate this profile -->
					<exists>${yaml.file}</exists>
				</file>
			</activation>
			<properties>
				<!-- Only unit tests are run when the docker-jar-project profile is active -->
				<skipTests>true</skipTests>
				<skipITs>true</skipITs>
			</properties>
			<build>
				<plugins>
				 <!-- activate the plugin -->
		            <plugin>
		                <groupId>io.swagger.codegen.v3</groupId>
					    <artifactId>swagger-codegen-maven-plugin</artifactId>
					    <version>${version.swagger.codegen}</version>
		                <executions>
		                    <execution>
		                        <goals>
		                            <goal>generate</goal>
		                        </goals>
		                        <configuration>
		                        	 <language>spring</language>
		                        	 <generateApis>false</generateApis>
		                            <!-- specify the swagger yaml -->
		                            <inputSpec>${yaml.file}</inputSpec>
		                            <output>${generated-sources-path}</output>
		                            <apiPackage>gov.va.reference.person.api</apiPackage>
                                	<modelPackage>gov.va.reference.person.api.model.v1</modelPackage>
                                	
									<configOptions>
							          <sourceFolder>${generated-sources-java-path}</sourceFolder>
							          <library>spring-mvc</library>
							          <interfaceOnly>true</interfaceOnly>
							          <useBeanValidation>true</useBeanValidation>
							          <dateLibrary>java8</dateLibrary>
							          <java8>true</java8>
							        </configOptions>
		                            
		                        </configuration>
		                    </execution>
		                </executions>
		            </plugin>
		            <plugin>
				        <groupId>org.codehaus.mojo</groupId>
				        <artifactId>build-helper-maven-plugin</artifactId>
				        <version>1.9.1</version>
				        <executions>
				            <!-- TODO for eclipse/m2e users: install the m2e connector 'buildhelper' by selecting 'Discover new m2e connectors' while hovering over the follwoing execution tag -->
				            <execution>
				                <id>add-generated-source</id>
				                <phase>initialize</phase>
				                <goals>
				                    <goal>add-source</goal>
				                </goals>
				                <configuration>
				                    <sources>
				                        <source>${generated-sources-path}/${generated-sources-java-path}</source>
				                    </sources>
				                </configuration>
				            </execution>
				        </executions>
				    </plugin>
				</plugins>
				<!-- the following is only necessary if you are using eclipse and m2e -->
				<pluginManagement>
				    <plugins>
				        <plugin>
				            <groupId>org.eclipse.m2e</groupId>
				            <artifactId>lifecycle-mapping</artifactId>
				            <version>1.0.0</version>
				            <configuration>
				                <lifecycleMappingMetadata>
				                    <pluginExecutions>
				                        <pluginExecution>
				                            <pluginExecutionFilter>
				                                <groupId>io.swagger.codegen.v3</groupId>
											    <artifactId>swagger-codegen-maven-plugin</artifactId>
				                                <versionRange>[${3.0.8},)</versionRange>
				                                <goals>
				                                    <goal>generate</goal>
				                                </goals>
				                            </pluginExecutionFilter>
				                            <action>
				                                <execute />
				                            </action>
				                        </pluginExecution>
				                    </pluginExecutions>
				                </lifecycleMappingMetadata>
				            </configuration>
				        </plugin>
				    </plugins>
				</pluginManagement>
			</build>
		</profile>
    </profiles>
</project>
