<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
    
    <parent>
		<groupId>gov.va.bip.reference.person</groupId>
		<artifactId>bip-reference-reactor</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<relativePath>..</relativePath>
	</parent>
	
    <artifactId>bip-reference-person</artifactId>
    <packaging>jar</packaging>
    
    <name>${project.artifactId}</name>
    <description>Reference Person Service Implementation for BIP Spring Boot Project</description>
    
    <dependencies>
    	<dependency>
            <groupId>gov.va.bip.framework</groupId>
            <artifactId>bip-framework-libraries</artifactId>
            <version>0.0.2-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>gov.va.bip.framework</groupId>
            <artifactId>bip-framework-autoconfigure</artifactId>
            <version>0.0.2-SNAPSHOT</version>
        </dependency>
		<dependency>
            <groupId>gov.va.bip.reference.person</groupId>
            <artifactId>bip-reference-partner-person</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>
    	<!-- spring-boot dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </dependency>
        <dependency>
        	<groupId>org.springframework.boot</groupId>
        	<artifactId>spring-boot-configuration-processor</artifactId>
        	<optional>true</optional>
        </dependency>
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <!-- spring cloud dependencies -->
        <!-- Spring-cloud Netflix Feign dependency for defining declarative REST clients -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
        <!-- Spring-cloud Netflix hystrix dependency for circuit breaker implementation -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bus-amqp</artifactId>
        </dependency>
	   <dependency> 
	       <groupId>org.springframework.cloud</groupId>
	       <artifactId>spring-cloud-starter-sleuth</artifactId>
	   </dependency>		   
	   <dependency> 
	       <groupId>org.springframework.cloud</groupId>
	       <artifactId>spring-cloud-stream-binder-rabbit</artifactId>
	   </dependency>
	   <dependency>
		   <groupId>org.springframework.retry</groupId>
		   <artifactId>spring-retry</artifactId>
	   </dependency>
		<dependency> 
	       <groupId>org.springframework.cloud</groupId>
	       <artifactId>spring-cloud-vault-config-consul</artifactId>
	   </dependency>
   		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-consul-config</artifactId>
		</dependency>
		<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-consul-all</artifactId>
            <exclusions>
            	<!-- Module spring-cloud-netflix-core is deprecated as of 2.1.0, use spring-cloud-netflix-hystrix instead. -->
				<exclusion>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-netflix-core</artifactId>
				</exclusion>
			</exclusions>
        </dependency>
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.codehaus.janino/janino -->
		<dependency>
		    <groupId>org.codehaus.janino</groupId>
		    <artifactId>janino</artifactId>
		</dependency>
        <!-- test dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
    	<plugins>
    		 <plugin>
				<!-- 
				 * Meta-information about the web application.<br/><br/>
				 * 
				 * The templating maven plugin handles generating and copying files from a source to a given output directory, while filtering them. 
				 * This plugin is useful to filter Java Source Code as there is a need to have things in the code replaced with properties values.
				 * Generates class to store project.* properties in the ApplicationInfo.java placed under <sourceDirectory>
				 * This mojo helps adding a filtered source folder in one go. This is useful as we want to use properties coming from the POM inside 
				 * parts of our source code that requires real constants
				 *
				 * @see ApplicationInfo.java in src/java-template directory
			    -->
			    <groupId>org.codehaus.mojo</groupId>
			    <artifactId>templating-maven-plugin</artifactId>
			    <version>${templating-maven-plugin.version}</version>
			    <executions>
			        <execution>
			            <id>filtering-java-templates</id>
			            <goals>
			                <goal>filter-sources</goal>
			            </goals>
			            <configuration>
			             <sourceDirectory>${basedir}/src/main/java-template</sourceDirectory>
			          		<outputDirectory>${project.build.directory}/generated-sources/java-template</outputDirectory>
			          	</configuration>
			        </execution>
			    </executions>
			</plugin>
			<plugin>
				<!-- Generate the source java file described by the templating-maven-plugin above -->
			      <groupId>org.codehaus.mojo</groupId>
			      <artifactId>build-helper-maven-plugin</artifactId>
			      <executions>
			          <execution>
			              <id>add-source</id>
			              <phase>generate-sources</phase>
			              <goals>
			                  <goal>add-source</goal>
			              </goals>
			              <configuration>
			                  <sources>
			                      <source>${project.build.directory}/generated-sources/java-template</source>
			                  </sources>
			              </configuration>
			          </execution>
			      </executions>
			  </plugin>
    	</plugins>
    </build>
    
    <profiles>
		<profile>
			<id>openapi-generator-project</id>
			<activation>
				<file><!-- add a file named .docker-jar-project-marker to war projects 
						to activate this profile -->
					<exists>${basedir}/src/main/resources/swagger/api.yml</exists>
				</file>
			</activation>
			<properties>
				<!-- Only unit tests are run when the docker-jar-project profile is active -->
				<skipTests>true</skipTests>
				<skipITs>true</skipITs>
			</properties>
			<build>
				<plugins>
				 <!-- activate the plugin -->
		            <plugin>
		                <groupId>org.openapitools</groupId>
		                <artifactId>openapi-generator-maven-plugin</artifactId>
		                <version>3.3.4</version>
		                <executions>
		                    <execution>
		                        <goals>
		                            <goal>generate</goal>
		                        </goals>
		                        <configuration>
		                            <!-- specify the swagger yaml -->
		                            <inputSpec>${basedir}/src/main/resources/swagger/api.yml</inputSpec>
		
		                            <!-- target to generate java client code -->
		                            <!-- hint: if you want to generate java server code, e.g. based on Spring Boot,
		                                 you can use the following target: <generatorName>spring</generatorName> -->
		                            <generatorName>spring</generatorName>
		                            
		                            <apiPackage>gov.va.reference.person.api</apiPackage>
                                	<modelPackage>gov.va.reference.person.api.model.v1</modelPackage>
                                	<supportingFilesToGenerate>ApiUtil.java</supportingFilesToGenerate>
                                	<generateApiDocumentation>true</generateApiDocumentation>
                                	<validateSpec>true</validateSpec>
                                	<withXml>true</withXml>
									
		
		                            <!-- pass any necessary config options -->
		                            <configOptions>
		           <!--               		<artifactId>foo</artifactId>
										<artifactDescription>Test API</artifactDescription>
										<title>Test API</title>
										<artifactUrl>https://api.example.com</artifactUrl>
										<groupId>com.example.api</groupId>
										<artifactVersion>1</artifactVersion>								
										<sourceFolder>src/gen/java/main</sourceFolder> -->
										<serializableModel>true</serializableModel>
										<dateLibrary>java8</dateLibrary>
										<java8>true</java8>
										<async>false</async> 
										<delegatePattern>true</delegatePattern>
 										<useBeanValidation>true</useBeanValidation>
										<useOptional>true</useOptional>	
										<hideGenerationTimestamp>true</hideGenerationTimestamp> 
										<interfaceOnly>true</interfaceOnly>
		                            </configOptions>
		                            
		                        </configuration>
		                    </execution>
		                </executions>
		            </plugin>
				</plugins>
			</build>
		</profile>
    </profiles>
</project>
